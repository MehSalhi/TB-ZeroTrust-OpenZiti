# Auteur      : Mehdi Salhi
# Auteur      : OpenZiti documentation
# Sujet       : Travail de Bachelor Zero Trust OpenZiti
# But         : Déploie une infrastructure OpenZiti
# No          : n1
# Description : 1 contrôleur, 1 routeur, 1 initialisteur, 1 serveur vidéo, 1
#               streamer. Tous les fichiers sont sauvegardés dans le répertoire
#               local "vol", et monté dans le répertoire "persistent" sur les
#               containers
version: '2.4'
services:
  # openziti controller
  ziti-controller:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    env_file:
      - ./.env
    ports:
      - ${ZITI_EDGE_CONTROLLER_PORT:-1280}:${ZITI_EDGE_CONTROLLER_PORT:-1280}
      - ${ZITI_CTRL_PORT:-6262}:${ZITI_CTRL_PORT:-6262}
    environment:
      - ZITI_EDGE_IDENTITY_ENROLLMENT_DURATION=${ZITI_EDGE_IDENTITY_ENROLLMENT_DURATION}
      - ZITI_EDGE_ROUTER_ENROLLMENT_DURATION=${ZITI_EDGE_ROUTER_ENROLLMENT_DURATION}
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    entrypoint:
      - "/var/openziti/scripts/run-controller.sh"
    networks:
      A:
        aliases:
          - ziti-edge-controller
      control_server:
        aliases:
          - ziti-edge-controller
      control_stream:
        aliases:
          - ziti-edge-controller

  # controller init
  ziti-controller-init-container:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    depends_on:
      - ziti-controller
    environment:
      - ZITI_CONTROLLER_RAWNAME="${ZITI_CONTROLLER_RAWNAME}"
      - ZITI_EDGE_CONTROLLER_RAWNAME="${ZITI_EDGE_CONTROLLER_RAWNAME}"
    env_file:
      - ./.env
    networks:
      A:
        aliases:
          - ziti-edge-controller-init-container
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    entrypoint:
      - "/var/openziti/scripts/run-with-ziti-cli.sh"
    command:
      - "/var/openziti/scripts/access-control.sh"

  # edge router
  ziti-edge-router:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    hostname: ziti-edge-router
    depends_on:
      - ziti-controller
    environment:
      - ZITI_CONTROLLER_RAWNAME="${ZITI_CONTROLLER_RAWNAME}"
      - ZITI_EDGE_CONTROLLER_RAWNAME="${ZITI_EDGE_CONTROLLER_RAWNAME}"
      - ZITI_EDGE_ROUTER_RAWNAME=${ZITI_EDGE_ROUTER_RAWNAME:-ziti-edge-router}
      - ZITI_EDGE_ROUTER_ROLES=public
    ports:
      - ${ZITI_EDGE_ROUTER_PORT:-3022}:${ZITI_EDGE_ROUTER_PORT:-3022}
    networks:
      A:
        aliases:
          - ziti-edge-router
      B:
        aliases:
          - ziti-edge-router
      C:
        aliases:
          - ziti-edge-router
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    entrypoint: ["bash", "-c", sleep 5 && /var/openziti/ziti-bin/ziti-router run /persistent/ziti-edge-router.yaml]
    #stdin_open: true
    #tty: true
    
    # console
  ziti-console:
    image: openziti/zac
    environment:
      - ZAC_SERVER_CERT_CHAIN=/persistent/pki/${ZITI_EDGE_CONTROLLER_HOSTNAME:-ziti-controller}-intermediate/certs/${ZITI_EDGE_CONTROLLER_HOSTNAME:-ziti-controller}-server.cert
      - ZAC_SERVER_KEY=/persistent/pki/${ZITI_EDGE_CONTROLLER_HOSTNAME:-ziti-controller}-intermediate/keys/${ZITI_EDGE_CONTROLLER_HOSTNAME:-ziti-controller}-server.key
      - PORTTLS=8443
    ports:
      - 1408:1408
      - 8443:8443
    working_dir: /usr/src/app
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    networks:
      - A
      
    ##### machines
    # video server
  video-server:
    image: mehdi/rtmp-hls_server
    build:
      dockerfile: ./rtmp-hls-server/Dockerfile
      context: .
      network: host
    depends_on:
      - ziti-edge-router
    cap_add:
      - NET_ADMIN
    ports:
      - 8080:8080
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
    entrypoint:
      - "/persistent/tunnel-server.sh"
    networks: 
      B:
        aliases:
          - video-server
      control_server:
        aliases:
          - video-server
          
  # video streamer
  video-streamer:
    image: mehdi-linuxserver/ffmpeg
    depends_on:
      video-server:
        condition: service_healthy
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    build:
      dockerfile: Dockerfile_streamer
      context: .
      network: host
    volumes:
      - type: bind
        source: ./vol
        target: /persistent
    entrypoint:
      - "/persistent/tunnel-streamers.sh"
    privileged: true
    stdin_open: true
    tty: true
    networks:
      C:
        aliases:
          - video-streamer
      control_stream:
        aliases:
          - video-streacontrol_streamermer

# networks
networks:
  A:
    driver: bridge
  B:
    driver: bridge
  C:
    driver: bridge
  control_server:
    driver: bridge
  control_stream:
    driver: bridge
